# Generated by Django 4.2.11 on 2024-03-24 15:29

from django.db import migrations, models
import django.db.models.deletion


# This squashing was necessary as we moved accounts to a shared folder,
# but accounts/migrations/0009_delete_institute.py depended on
# core/migrations/0012_remove_dicomnode_institutes_dicomnode_groups_and_more.py
# This dependency was deleted to make account independent of the main project.
# This squash here is to get rid of institutes from the main project as
# otherwise a failure will arise during migration as Institute will be deleted 
# too early.

class Migration(migrations.Migration):

    replaces = [('core', '0007_dicom_node_institute_access'), ('core', '0008_queuedtask_and_more'), ('core', '0009_remove_queuedtask_eta_priority_created_idx_and_more'), ('core', '0010_dicomnodegroupaccess'), ('core', '0011_convert_dicom_node_accesses'), ('core', '0012_remove_dicomnode_institutes_dicomnode_groups_and_more')]

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('accounts', '0005_institute'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('accounts', '0007_convert_institutes_to_groups'),
        ('core', '0006_dicomserver_dicomweb_authorization_header_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='dicomnode',
            name='destination_active',
        ),
        migrations.RemoveField(
            model_name='dicomnode',
            name='source_active',
        ),
        migrations.CreateModel(
            name='QueuedTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('priority', models.PositiveIntegerField()),
                ('eta', models.DateTimeField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'indexes': [models.Index(fields=['eta', 'priority', 'created'], name='eta_priority_created_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='queuedtask',
            constraint=models.UniqueConstraint(fields=('content_type', 'object_id'), name='unique_queued_task_per_dicom_task'),
        ),
        migrations.RemoveIndex(
            model_name='queuedtask',
            name='eta_priority_created_idx',
        ),
        migrations.AddField(
            model_name='queuedtask',
            name='locked',
            field=models.BooleanField(default=False),
        ),
        migrations.AddIndex(
            model_name='queuedtask',
            index=models.Index(fields=['locked', 'eta', 'priority', 'created'], name='fetch_next_task_idx'),
        ),
        migrations.CreateModel(
            name='DicomNodeGroupAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.BooleanField(default=False)),
                ('destination', models.BooleanField(default=False)),
                ('dicom_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accesses', to='core.dicomnode')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
            ],
            options={
                'verbose_name_plural': 'DICOM node group accesses',
            },
        ),
        migrations.AddConstraint(
            model_name='dicomnodegroupaccess',
            constraint=models.UniqueConstraint(fields=('dicom_node', 'group'), name='unique_dicom_node_per_group'),
        ),
        migrations.AddField(
            model_name='dicomnode',
            name='groups',
            field=models.ManyToManyField(blank=True, related_name='dicom_nodes', through='core.DicomNodeGroupAccess', to='auth.group'),
        ),
    ]
