x-app: &default-app
  image: adit_prod:latest
  env_file:
    - ../.env.prod
  environment:
    ENABLE_REMOTE_DEBUGGING: 0
    DJANGO_SETTINGS_MODULE: "adit.settings.production"
    SSL_CERT_FILE: "/var/www/adit/ssl/cert.pem"
    SSL_KEY_FILE: "/var/www/adit/ssl/key.pem"

x-deploy: &deploy
  replicas: 1
  restart_policy:
    condition: on-failure
    max_attempts: 3

services:
  # We can't use those manage commands inside the web container in production because
  # the web service may have multiple replicas. So we make sure to only run them once
  # and wait for it to be finished by the web service containers.
  init:
    <<: *default-app
    hostname: init.local
    command: >
      bash -c "
        wait-for-it -s postgres.local:5432 -t 60 && 
        ./manage.py migrate &&
        ./manage.py collectstatic --no-input &&
        ./manage.py create_admin &&
        ./manage.py generate_cert &&
        ./manage.py ok_server --host 0.0.0.0 --port 8000
      "
    deploy:
      <<: *deploy

  web:
    <<: *default-app
    build:
      target: production
    ports:
      - "${ADIT_HTTP_PORT:-80}:80"
      - "${ADIT_HTTPS_PORT:-443}:443"
    command: >
      bash -c "
        wait-for-it -s init.local:8000 -t 300 && 
        echo 'Starting web server ...'
        daphne -b 0.0.0.0 -p 80 -e ssl:443:privateKey=/var/www/adit/ssl/key.pem:certKey=/var/www/adit/ssl/cert.pem adit.asgi:application
      "
    deploy:
      <<: *deploy
      replicas: 3

  postgres:
    env_file:
      - ../.env.prod
    deploy:
      <<: *deploy

  dicom_worker:
    <<: *default-app
    command: >
      bash -c "
        wait-for-it -s web.local:80 -t 0 && 
        ./manage.py dicom_worker
      "
    deploy:
      <<: *deploy

  celery_worker:
    <<: *default-app
    command: ./manage.py celery_worker -Q default_queue
    deploy:
      <<: *deploy

  celery_beat:
    <<: *default-app
    command: ./manage.py celery_beat
    deploy:
      <<: *deploy

  receiver:
    <<: *default-app
    ports:
      - "11112:11112"
    command: ./manage.py receiver
    deploy:
      <<: *deploy

  flower:
    <<: *default-app
    deploy:
      <<: *deploy

  redis:
    deploy:
      <<: *deploy

  orthanc1:
    deploy:
      <<: *deploy

  orthanc2:
    deploy:
      <<: *deploy
