# Generated by Django 4.2.2 on 2023-06-21 10:58

import adit.core.validators
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("core", "0005_auto_20210510_1645"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ContinuousTransferJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("UV", "Unverified"),
                            ("PE", "Pending"),
                            ("IP", "In Progress"),
                            ("CI", "Canceling"),
                            ("CA", "Canceled"),
                            ("SU", "Success"),
                            ("WA", "Warning"),
                            ("FA", "Failure"),
                        ],
                        default="UV",
                        max_length=2,
                    ),
                ),
                ("urgent", models.BooleanField(default=False)),
                ("message", models.TextField(blank=True, default="")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("start", models.DateTimeField(blank=True, null=True)),
                ("end", models.DateTimeField(blank=True, null=True)),
                (
                    "trial_protocol_id",
                    models.CharField(
                        blank=True,
                        max_length=64,
                        validators=[
                            django.core.validators.RegexValidator(
                                inverse_match=True,
                                message="Contains invalid backslash character",
                                regex="\\\\",
                            )
                        ],
                    ),
                ),
                (
                    "trial_protocol_name",
                    models.CharField(
                        blank=True,
                        max_length=64,
                        validators=[
                            django.core.validators.RegexValidator(
                                inverse_match=True,
                                message="Contains invalid backslash character",
                                regex="\\\\",
                            )
                        ],
                    ),
                ),
                ("archive_password", models.CharField(blank=True, max_length=50)),
                ("project_name", models.CharField(max_length=150)),
                ("project_description", models.TextField(max_length=2000)),
                (
                    "study_date_start",
                    models.DateField(error_messages={"invalid": "Invalid date format."}),
                ),
                (
                    "study_date_end",
                    models.DateField(
                        blank=True, error_messages={"invalid": "Invalid date format."}, null=True
                    ),
                ),
                (
                    "last_transfer",
                    models.DateTimeField(
                        blank=True, error_messages={"invalid": "Invalid date format."}, null=True
                    ),
                ),
                (
                    "patient_id",
                    models.CharField(
                        blank=True,
                        max_length=64,
                        validators=[
                            django.core.validators.RegexValidator(
                                inverse_match=True,
                                message="Contains invalid backslash character",
                                regex="\\\\",
                            ),
                            django.core.validators.RegexValidator(
                                inverse_match=True,
                                message="Contains invalid control characters.",
                                regex="[\\f\\n\\r]",
                            ),
                            django.core.validators.RegexValidator(
                                inverse_match=True,
                                message="Contains invalid wildcard characters.",
                                regex="[\\*\\?]",
                            ),
                        ],
                    ),
                ),
                (
                    "patient_name",
                    models.CharField(
                        blank=True,
                        max_length=324,
                        validators=[
                            django.core.validators.RegexValidator(
                                inverse_match=True,
                                message="Contains invalid backslash character",
                                regex="\\\\",
                            ),
                            django.core.validators.RegexValidator(
                                inverse_match=True,
                                message="Contains invalid control characters.",
                                regex="[\\f\\n\\r]",
                            ),
                            django.core.validators.RegexValidator(
                                inverse_match=True,
                                message="Contains invalid wildcard characters.",
                                regex="[\\*\\?]",
                            ),
                        ],
                    ),
                ),
                (
                    "patient_birth_date",
                    models.DateField(
                        blank=True, error_messages={"invalid": "Invalid date format."}, null=True
                    ),
                ),
                (
                    "modalities",
                    models.JSONField(
                        blank=True, null=True, validators=[adit.core.validators.validate_modalities]
                    ),
                ),
                ("study_description", models.CharField(blank=True, max_length=64)),
                ("series_description", models.CharField(blank=True, max_length=64)),
                (
                    "series_numbers",
                    models.JSONField(
                        blank=True,
                        null=True,
                        validators=[adit.core.validators.validate_series_numbers],
                    ),
                ),
                (
                    "destination",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="core.dicomnode",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_jobs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="core.dicomnode",
                    ),
                ),
            ],
            options={
                "permissions": [
                    ("can_process_urgently", "Can process urgently"),
                    ("can_transfer_unpseudonymized", "Can transfer unpseudonymized"),
                ],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ContinuousTransferSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("locked", models.BooleanField(default=False)),
                ("suspended", models.BooleanField(default=False)),
                (
                    "slot_begin_time",
                    models.TimeField(
                        default=datetime.time(22, 0), help_text="Must be set in UTC time zone."
                    ),
                ),
                (
                    "slot_end_time",
                    models.TimeField(
                        default=datetime.time(8, 0), help_text="Must be set in UTC time zone."
                    ),
                ),
                ("transfer_timeout", models.IntegerField(default=3)),
            ],
            options={
                "verbose_name_plural": "Continuous transfer settings",
            },
        ),
        migrations.CreateModel(
            name="ContinuousTransferTask",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("task_id", models.PositiveIntegerField()),
                ("celery_task_id", models.CharField(max_length=255)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PE", "Pending"),
                            ("IP", "In Progress"),
                            ("CA", "Canceled"),
                            ("SU", "Success"),
                            ("WA", "Warning"),
                            ("FA", "Failure"),
                        ],
                        default="PE",
                        max_length=2,
                    ),
                ),
                ("retries", models.PositiveSmallIntegerField(default=0)),
                ("message", models.TextField(blank=True, default="")),
                ("log", models.TextField(blank=True, default="")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("start", models.DateTimeField(blank=True, null=True)),
                ("end", models.DateTimeField(blank=True, null=True)),
                (
                    "patient_id",
                    models.CharField(
                        max_length=64,
                        validators=[
                            django.core.validators.RegexValidator(
                                inverse_match=True,
                                message="Contains invalid backslash character",
                                regex="\\\\",
                            ),
                            django.core.validators.RegexValidator(
                                inverse_match=True,
                                message="Contains invalid control characters.",
                                regex="[\\f\\n\\r]",
                            ),
                            django.core.validators.RegexValidator(
                                inverse_match=True,
                                message="Contains invalid wildcard characters.",
                                regex="[\\*\\?]",
                            ),
                        ],
                    ),
                ),
                (
                    "study_uid",
                    models.CharField(
                        max_length=64,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Invalid character in UID.", regex="^[\\d\\.]+$"
                            )
                        ],
                    ),
                ),
                (
                    "series_uids",
                    models.JSONField(
                        blank=True, null=True, validators=[adit.core.validators.validate_uid_list]
                    ),
                ),
                (
                    "pseudonym",
                    models.CharField(
                        blank=True,
                        max_length=64,
                        validators=[
                            django.core.validators.RegexValidator(
                                inverse_match=True,
                                message="Contains invalid backslash character",
                                regex="\\\\",
                            ),
                            django.core.validators.RegexValidator(
                                inverse_match=True,
                                message="Contains invalid control characters.",
                                regex="[\\f\\n\\r]",
                            ),
                        ],
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="continuous_transfer.continuoustransferjob",
                    ),
                ),
            ],
            options={
                "ordering": ("task_id",),
                "abstract": False,
                "unique_together": {("job", "task_id")},
            },
        ),
        migrations.AddIndex(
            model_name="continuoustransferjob",
            index=models.Index(fields=["owner", "status"], name="continuous__owner_i_250893_idx"),
        ),
    ]
