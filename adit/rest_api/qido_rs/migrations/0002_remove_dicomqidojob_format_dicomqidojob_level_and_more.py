# Generated by Django 4.0.6 on 2022-08-11 16:06

import adit.core.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('qido_rs', '0001_initial'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='dicomqidojob',
            name='format',
        ),
        migrations.AddField(
            model_name='dicomqidojob',
            name='level',
            field=models.CharField(blank=True, max_length=64),
        ),
        migrations.CreateModel(
            name='DicomQidoResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_id', models.CharField(blank=True, max_length=64, validators=[django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid backslash character', regex='\\\\'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid control characters.', regex='[\\f\\n\\r]'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid wildcard characters.', regex='[\\*\\?]')])),
                ('patient_name', models.CharField(max_length=324, validators=[django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid backslash character', regex='\\\\'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid control characters.', regex='[\\f\\n\\r]'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid wildcard characters.', regex='[\\*\\?]')])),
                ('patient_birth_date', models.DateField()),
                ('accession_number', models.CharField(max_length=32, validators=[django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid backslash character', regex='\\\\'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid control characters.', regex='[\\f\\n\\r]'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid wildcard characters.', regex='[\\*\\?]')])),
                ('study_uid', models.CharField(blank=True, max_length=64, validators=[django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid backslash character', regex='\\\\'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid control characters.', regex='[\\f\\n\\r]'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid wildcard characters.', regex='[\\*\\?]')])),
                ('study_date', models.DateField()),
                ('study_time', models.TimeField()),
                ('study_description', models.CharField(max_length=64, validators=[django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid backslash character', regex='\\\\'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid control characters.', regex='[\\f\\n\\r]'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid wildcard characters.', regex='[\\*\\?]')])),
                ('modalities', models.JSONField(blank=True, null=True, validators=[adit.core.validators.validate_modalities])),
                ('study_count', models.PositiveIntegerField(blank=True, null=True)),
                ('series_uid', models.CharField(blank=True, max_length=64, validators=[django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid backslash character', regex='\\\\'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid control characters.', regex='[\\f\\n\\r]'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid wildcard characters.', regex='[\\*\\?]')])),
                ('series_description', models.CharField(blank=True, max_length=64, validators=[django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid backslash character', regex='\\\\'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid control characters.', regex='[\\f\\n\\r]'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid wildcard characters.', regex='[\\*\\?]')])),
                ('series_count', models.PositiveIntegerField(blank=True, null=True)),
                ('sop_uid', models.CharField(blank=True, max_length=64, validators=[django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid backslash character', regex='\\\\'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid control characters.', regex='[\\f\\n\\r]'), django.core.validators.RegexValidator(inverse_match=True, message='Contains invalid wildcard characters.', regex='[\\*\\?]')])),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='qido_rs.dicomqidojob')),
            ],
        ),
    ]
